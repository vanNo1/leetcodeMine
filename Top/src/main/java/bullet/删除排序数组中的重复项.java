package bullet;

/**
 * 给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
 * <p>
 * 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
 * <p>
 *  
 * <p>
 * 示例 1:
 * <p>
 * 给定数组 nums = [1,1,2],
 * <p>
 * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
 * <p>
 * 你不需要考虑数组中超出新长度后面的元素。
 * 示例 2:
 * <p>
 * 给定 nums = [0,0,1,1,1,2,2,3,3,4],
 * <p>
 * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
 * <p>
 * 你不需要考虑数组中超出新长度后面的元素。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * <p>
 * <p>
 * 思路：
 * 子弹法：
 * j来游走，获取子弹，i为子弹射出的坑位，取出有效的子弹（数字），然后不断射到前面的坑位，那么当j游走完了，i就是有效数字的个数
 */
public class 删除排序数组中的重复项 {
    public int removeDuplicates(int[] nums) {
        if (nums == null) {
            return 0;
        }
        int i = 0;
        // pre用来保存前面那个数子，看看是不是后面的和前面的重复，初始化就设置为和第一个数不相同的数字即可
        int pre = Integer.MAX_VALUE;
        for (int j = 0; j < nums.length; j++) {
            // 如果是一个子弹（如果这个数子和它前面的那个数字不同）
            if (pre != nums[j]) {
                // 射入弹坑，并且此时弹坑向后移动一位
                nums[i++] = nums[j];
                // 并且将此次的数字设置为pre
                pre = nums[j];
            }
        }
        // i就是最后有效数字的个数
        return i;
    }
}
