package bullet;

/**
 * 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
 * <p>
 * 示例:
 * <p>
 * 输入: [0,1,0,3,12]
 * 输出: [1,3,12,0,0]
 * 说明:
 * <p>
 * 必须在原数组上操作，不能拷贝额外的数组。
 * 尽量减少操作次数。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/move-zeroes
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * <p>
 * <p>
 * 思路：这道题很有意思：用到了手枪思想
 * <p>
 * i变量是手枪每次要打的位置，j变量是去拿子弹，如果拿到了子弹，那么就可以打在i位置上
 * 总的来说，就是把数组中非0的数全部提取出来，然后放在数组的前面，那么后面的数字就直接填0就ok了
 */
public class 移动零 {
    public void moveZeroes(int[] nums) {
        if (nums == null) {
            return;
        }
        // 手枪要打的位置从0开始
        int i = 0;
        // 获取子弹，要走完nums
        for (int j = 0; j < nums.length; j++) {
            // 如果获取到了子弹，那么就把它打在i位置上
            if (nums[j] != 0) {
                nums[i] = nums[j];
                // 打完之后i位置放到后面一格
                i++;
            }
        }
        // 当j变量走完，代表子弹全部打完，那么剩下的就是0了，填入即可
        // 此时的i是正好要放0 的一个位置
        while (i < nums.length) {
            nums[i++] = 0;
        }
    }

}
