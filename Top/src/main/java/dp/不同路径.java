package dp;

/**
 *
 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

 问总共有多少条不同的路径？



 示例 1：


 输入：m = 3, n = 7
 输出：28
 示例 2：

 输入：m = 3, n = 2
 输出：3
 解释：
 从左上角开始，总共有 3 条路径可以到达右下角。
 1. 向右 -> 向右 -> 向下
 2. 向右 -> 向下 -> 向右
 3. 向下 -> 向右 -> 向右
 示例 3：

 输入：m = 7, n = 3
 输出：28
 示例 4：

 输入：m = 3, n = 3
 输出：6


 提示：

 1 <= m, n <= 100
 题目数据保证答案小于等于 2 * 109
 *
 *
 * m*n 相当于要向右走m-1格，向下走n-1格
 *
 * 思路：动态规划，dp[i][j]表示机器人从(0,0)->(i,j)有几种走法
 * 显然：dp[i][j]=dp[i-1][j]+dp[i][j-1]
 * baseCase：最上面从左到右一排，都是1，最左边，从上到下一列，都是1，因为一直往右走或者一直往下走，怎么样都是一种走法
 * dp[i][j]走法？要么从dp[i-1][j]走过来，要么从dp[i][j-1]走过来，所以两者方式相加就是dp[i][j]的值
 */
public class 不同路径 {
    public int uniquePaths(int m, int n) {
        // 正好有m*n个格子，那么最终是dp[n-1][m-1]
        // 坑：一开始这里创建反了，注意：n是行数，m是列数
        int[][] dp = new int[n][m];
        // baseCase： 最上面从左到右一排，都是1，最左边，从上到下一列，都是1
        for (int i = 0; i < m; i++) {
            dp[0][i] = 1;
        }
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }
        // 从左到右，从上到下遍历
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[n-1][m-1];
    }
}
