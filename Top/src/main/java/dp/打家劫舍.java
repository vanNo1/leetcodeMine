package dp;

/**
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * <p>
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：[1,2,3,1]
 * 输出：4
 * 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 * 偷窃到的最高金额 = 1 + 3 = 4 。
 * 示例 2：
 * <p>
 * 输入：[2,7,9,3,1]
 * 输出：12
 * 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 * 偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 * <p>
 * 思路：
 * 动态规划:
 * dp[i]代表，偷0-i 号房屋能获取的最大收益。
 * 第i号房屋，要么去偷，要么不偷。如果偷的话，那么第i-1号房屋必不能偷。如果不偷的话，可以偷0- i-1号房屋
 * dp[i]=dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2])
 * 之前以为有逻辑漏洞，但其实这个状态转移方程是ok 的，dp的含义是符合后面的嵌套关系的。
 */
public class 打家劫舍 {
    public int rob(int[] nums) {
        // 测试用例也是有病，会出一个空的nums
        if (nums.length == 0) {
            return 0;
        }
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        // nums有可能只有一个房屋，所以要判断一下
        if (nums.length > 1) {
            dp[1] = Math.max(nums[0], nums[1]);
        }
        // 从第三个房屋开始，要么偷第三家，偷完之后必不能偷第二家，要么不偷第三家，不偷的话可以从第二家偷起（但不一定就要偷第二家）。
        for (int i = 2; i < dp.length; i++) {
            dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        return dp[dp.length - 1];
    }
}
