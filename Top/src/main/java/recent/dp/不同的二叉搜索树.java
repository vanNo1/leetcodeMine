package recent.dp;

/**
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
 * <p>
 * 示例:
 * <p>
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 * <p>
 * 1         3     3      2      1
 * \       /     /      / \      \
 * 3     2     1      1   3      2
 * /     /       \                 \
 * 2     1         2                 3
 *
 *
 * 用dp很简单
 * dp[i]：用i个节点能构成多少种树结构
 * 以i=2分析，头部用一个节点，剩下1个节点
 * 1.左边分1个节点，右边分0个节点  ：dp[1]*dp[0]
 * 2.左边分0个节点，右边分1个节点 ： dp[0]*dp[1]
 * 把这两种情况相加即可
 */
public class 不同的二叉搜索树 {
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i < dp.length; i++) {
            for (int j = 0; j < i; j++) {
                // 这里记得要是i-j-1 别忘了把根节点减去
                dp[i] += dp[j] * dp[i - j - 1];
            }
        }
        return dp[n];
    }
}
