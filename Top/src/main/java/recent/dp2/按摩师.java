package recent.dp2;

/**
 * @author Van
 * @date 2021/3/16 - 14:42
 * 一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。
 *
 * 注意：本题相对原题稍作改动
 *
 *  
 *
 * 示例 1：
 *
 * 输入： [1,2,3,1]
 * 输出： 4
 * 解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
 * 示例 2：
 *
 * 输入： [2,7,9,3,1]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
 * 示例 3：
 *
 * 输入： [2,1,4,5,3,1,1,3]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/the-masseuse-lcci
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * 基本上就是打家劫舍!!
 * 这里用了一种新的dp方式！！！
 */
public class 按摩师 {
    public int massage(int[] nums) {
        if (nums.length==0)return 0;
        int[][] dp = new int[nums.length][2];
        // 0 代表不去
        dp[0][0] = 0;
        // i 代表去
        dp[0][1] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            // 如果i不去，那么第i-1天预不预约都可以！所以选出一个最大值
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            // 如果i去，那么第i-1天必不能去
            dp[i][1] = nums[i] + dp[i - 1][0];
        }
        // 第i天最大值：比较第i天去或不去即可
        return Math.max(dp[dp.length - 1][0], dp[dp.length - 1][1]);
    }
}
