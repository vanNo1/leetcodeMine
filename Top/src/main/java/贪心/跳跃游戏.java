package 贪心;


/**
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 *
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 *
 * 判断你是否能够到达最后一个位置。
 *
 * 示例 1:
 *
 * 输入: [2,3,1,1,4]
 * 输出: true
 * 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 * 示例 2:
 *
 * 输入: [3,2,1,0,4]
 * 输出: false
 * 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/jump-game
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * 思路：
 * k：代表能跳到num【k】的地方
 * k初始值为0，代表假如num[0]为0的话（没有获得能力的话）就直接gg了，下次判断的时候就return false了，
 * 所以这里k初始值为0 相当于给了一局的欢乐豆，只能打一把
 * 判断通过之后去获取能力，也就是nums[i]里面的值，如果此能力nums[i]+i > k 那么就更新k的值，代表又能跳更多格
 * 知道循环正常结束，跑完了那么直接返回true了
 */
public class 跳跃游戏 {
    public boolean canJump(int[] nums) {
        int k = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i > k) {
                return false;
            }
            k = Math.max(nums[i]+i, k);
        }
        return true;
    }
}
